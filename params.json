{"name":"Movie Store","tagline":"My midterm pair programming project in C#.","body":"###Movie Store Midterm Class Customer    \r\n\r\n\r\n\r\n    namespace MidtermProject\r\n     {\r\n        class Customer\r\n          {\r\n        // Add fields we agreed upon. Will be displayed in master copy.\r\n        public string custName;\r\n        public string phoneNum;\r\n        public string movieSelection;\r\n        public DateTime checkOut;\r\n\r\n\r\n        // Add properties we agreed upon. Will be displayed in master copy.\r\n        public string CustName\r\n        {\r\n            get\r\n            {\r\n                return this.custName;\r\n            }\r\n            set\r\n            {\r\n                this.custName = value;\r\n            }\r\n        }\r\n\r\n        public string PhoneNum\r\n        {\r\n            get\r\n            {\r\n                // Doro added this formatting option. This will help catch input that is not convertable to numbers.\r\n                string num = \"\";\r\n                Regex rgx = new Regex(@\"\\(?\\s?(\\d{3})\\s?-?\\s?\\)?\\s?(\\d{3})\\s?-?\\s?(\\d{4})\");\r\n                //Console.WriteLine(rgx.IsMatch(phoneNum));\r\n                int counter = 1;\r\n                MatchCollection matches = rgx.Matches(phoneNum);\r\n                if (rgx.IsMatch(phoneNum))\r\n                {\r\n                    foreach (Match match in matches)\r\n                    {\r\n                        foreach (Group grp in match.Groups)\r\n                        {\r\n                            num += match.Groups[counter];\r\n                            counter++;\r\n                        }\r\n\r\n                    }\r\n                    string number = String.Format(\"{0:(###) ###-####}\", ulong.Parse(num));\r\n                    return number;\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(string.Format(\"Invalid number\"));\r\n                }\r\n            // this method will try parse the number. If it is true, it will print it. Else throw exception\r\n                /*ulong num = 0;  \r\n                bool parsed = UInt64.TryParse(phoneNum, out num);\r\n                if(parsed == true)\r\n                { \r\n                string number = String.Format(\"{0:(###)###-####}\", num);\r\n                return number;*/\r\n            }\r\n            set\r\n            {\r\n                this.phoneNum = value;\r\n            }\r\n        }\r\n\r\n        public string MovieSelection\r\n        {\r\n            get\r\n            {\r\n                return this.movieSelection;\r\n            }\r\n            set\r\n            {\r\n                this.movieSelection = value;\r\n            }\r\n        }\r\n\r\n        public DateTime CheckOut\r\n        {\r\n            get\r\n            {\r\n                return this.checkOut;\r\n            }\r\n            set\r\n            {\r\n                this.checkOut = value;\r\n            }\r\n        }\r\n\r\n        // Possible Customer Constructor.\r\n        public Customer(string custname, string phonenumber, string movie, DateTime checkoutDate)\r\n        {\r\n            this.CustName = custname;\r\n            this.PhoneNum = phonenumber;\r\n            this.MovieSelection = movie;\r\n            this.CheckOut = checkoutDate;\r\n        }\r\n\r\n        // We will add our methods into our BRANCH copies of master.\r\n        public void CustInfo(StringBuilder builder)      // Shalamar's printing method. Doro added the try-catch blocks.\r\n        {\r\n            // Using builder so we can write to file\r\n            builder.AppendLine();\r\n            builder.Append(CustName);\r\n            builder.AppendLine();\r\n            try\r\n            {                               // try method will print the phone number with format (###)###-#### \r\n                                            // so long as the string of phoneNum are convertable numbers (to ulong).\r\n                builder.Append(PhoneNum);\r\n            }\r\n            catch (Exception pn)\r\n            {                               // Will print an error on the screen if the inputed phoneNum does not contain\r\n                                            // all convertable numbers. (ex: (216)526-asdf is incorrect. Cannot convert asdf to numbers\r\n                builder.Append(\"Error: \" + pn.Message);\r\n            }\r\n            builder.AppendLine();\r\n            builder.Append(MovieSelection);\r\n            builder.AppendLine();\r\n            builder.Append(\"Movie checked out: \" + CheckOut);\r\n            builder.AppendLine();\r\n        }\r\n\r\n        public void NoMovieRented(StringBuilder builder)\r\n        {\r\n            builder.AppendLine();\r\n            builder.Append(CustName);   // Using builder so we can write to file\r\n            builder.AppendLine();\r\n            try\r\n            {                               // try method will print the phone number with format (###)###-#### \r\n                // so long as the string of phoneNum are convertable numbers (to ulong).\r\n                builder.Append(PhoneNum);\r\n            }\r\n            catch (Exception pn)\r\n            {                               // Will print an error on the screen if the inputed phoneNum does not contain\r\n                // all convertable numbers. (ex: (216)526-asdf is incorrect. Cannot convert asdf to numbers\r\n                builder.Append(\"Error: \" + pn.Message);\r\n            }\r\n            builder.AppendLine();\r\n            builder.Append(\"No movies checked out.\");\r\n            builder.AppendLine();\r\n        }\r\n\r\n        public void MovieSelectionMethod(List<string> movies, string movieSelection)\r\n        {\r\n            int selector = movies.FindIndex(index => index.Equals(movieSelection, StringComparison.CurrentCultureIgnoreCase));\r\n            // will grab the movie that matches the input and place it in the movieSelector string. This is so\r\n            // that the movie can be removed from the list based on how the movie is written in the list, not how it was inputed.\r\n            string movieSelector = movies[selector];\r\n            MovieSelection = movieSelector; // takes the correct format the movies is written in from the list and assigns it to property MovieSelection so that it prints correctly in customer info\r\n            movies.Remove(movieSelector);\r\n        }\r\n        public DateTime ReturnDate(DateTime checkoutDate)       // method to figure out return date from checkout date\r\n        {\r\n            DateTime returnDate = checkoutDate.AddDays(7);\r\n            return returnDate;\r\n        }\r\n\r\n        public int DaysLate(DateTime returnDate)        // method to figure out how late the movie is (in relation to today\r\n                                                        // and it's return date.\r\n        {\r\n            DateTime today = DateTime.Now;\r\n            TimeSpan amountOfDays = today.Subtract(returnDate);\r\n            return Convert.ToInt32(amountOfDays.TotalDays);\r\n        }\r\n\r\n        public void PrintLate(StringBuilder builder, DateTime returnDate)  // Shalamar's method\r\n        {\r\n            \r\n            int daysLate = DaysLate(returnDate);\r\n            double lateFee = daysLate * 1.50;\r\n            builder.Append(\"You are \" + daysLate + \" days late!\");// Using builder so we can write to file\r\n            builder.AppendLine();       \r\n            builder.Append(\"Please pay \" + \"$\" + lateFee + \" before you rent another movie!\");\r\n            builder.AppendLine();\r\n        }\r\n\r\n        public bool IsLate(DateTime checkedOut, DateTime returnDate)       // Doro's method\r\n        {\r\n            DateTime today = DateTime.Now;\r\n            if (today > returnDate)\r\n                return true;\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n###Movie Store Program    \r\n\r\n\r\n\r\n\r\n     using System;\r\n     using System.IO;\r\n     using System.Collections.Generic;\r\n     using System.Linq;\r\n     using System.Text;\r\n     using System.Threading.Tasks;\r\n\r\n     namespace MidtermProject\r\n     {\r\n       class Program\r\n       {\r\n          static void Main(string[] args)\r\n        {\r\n            // We will add our main programs into our individual BRANCH copies of master.\r\n\r\n            //this is part of Dorothy's branch off the master copy:\r\n            // practice customers (hard-coded)\r\n            Customer customer1 = new Customer(\"Doro Hunt\", \"21652686561234\", \"CoraLiNe\", new DateTime(2015, 09, 25));\r\n            Customer customer2 = new Customer(\"Shalamar Brown\", \"3305429078\", \"avengers\", new DateTime(2015, 10, 3));\r\n            Customer customer3 = new Customer(\"Orlando Cruz\", \"2164215714\", \"Kill bill\", new DateTime(2015, 10, 8));\r\n            Customer customer4 = new Customer(\"Johnny Smith\", \"440651asdf\", \"Halloweentown\", new DateTime(2015, 10, 10));\r\n            Customer customer5 = new Customer(\"Jenny Johnson\", \"4407597850\", \"Bridesmaids\", new DateTime(2015, 10, 12));\r\n            \r\n            // user input for our 5th customer\r\n            Console.WriteLine(\"Please enter your first and last name: \");\r\n            string custName = Console.ReadLine();\r\n            Console.WriteLine(\"Please enter your phone number: \");\r\n            string phoneNum = Console.ReadLine();\r\n            Console.WriteLine(\"Which movie would you like to check out?\");\r\n            string movieOption = Console.ReadLine();\r\n            Customer customer6 = new Customer(custName, phoneNum, movieOption, DateTime.Now);\r\n\r\n            // Created customerList so we can do following code to each individual customer\r\n            List<Customer> customerList = new List<Customer>(); \r\n            customerList.Add(customer1);\r\n            customerList.Add(customer2);\r\n            customerList.Add(customer3);\r\n            customerList.Add(customer4);\r\n            customerList.Add(customer5);\r\n            customerList.Add(customer6);\r\n            \r\n            // builder created to hold multiple strings\r\n            StringBuilder builder = new StringBuilder();\r\n            // writer created to write builder info into a txt file for customer summary\r\n            StreamWriter writer = new StreamWriter(\"..\\\\..\\\\OverDueAccounts.txt\");\r\n            \r\n            // list of movies\r\n            List<string> movies = new List<string>() {\"Avengers\", \"Pitch Perfect 2\", \"Cinderella\", \"Kill Bill\", \"The Matrix\", \r\n            \"Big Hero 6\", \"SpongeBob\", \"Identity Theft\", \"Coraline\", \"Bridesmaids\"};\r\n            \r\n            // prints out the list of movies\r\n            Console.WriteLine(\"List of movies:\");\r\n            foreach (string item in movies)\r\n            {\r\n                Console.WriteLine(item);\r\n            }\r\n            Console.WriteLine(\"\\n\");\r\n\r\n            // foreach loop will go through the customer list and execute the following code for individual customers in list\r\n            foreach (Customer obj in customerList)\r\n            {\r\n                string movieSelection = obj.MovieSelection; // grabs the input movie selection for customer and assigns it to variable we can use in loop\r\n                // Doro added this to help with ignoring of case\r\n                if (movies.Contains(movieSelection, StringComparer.CurrentCultureIgnoreCase))       //checks to see if movie selection is in movies (ignoring case)\r\n                {\r\n                    // calls a method that will find the movie in the list by the inputed info (ignoring case) and removing it from movie list\r\n                    obj.MovieSelectionMethod(movies, movieSelection);\r\n                    DateTime checkOutDate = obj.CheckOut;     // created this DateTime object to hold the checkout date \r\n                                                              // from customers in list so that I can call the ReturnDay method.\r\n                    DateTime returnDay = obj.ReturnDate(checkOutDate);    // Will return the return date and place it in\r\n                                                                          // DateTime object called returnDay\r\n                    //obj.CustInfo(builder);  // will call a method that will add the current customer's info to builder\r\n                    //builder.Append(\"Return date: \" + customer1.ReturnDate(checkOutDate));\r\n                    //builder.AppendLine();\r\n\r\n                    if (obj.IsLate(checkOutDate, returnDay) == true)    // calls a method that will check if customer is late\r\n                    {\r\n                        // this will help us print only the late accounts to the text file.\r\n                        obj.CustInfo(builder);\r\n                        builder.Append(\"Return date: \" + customer1.ReturnDate(checkOutDate));\r\n                        builder.AppendLine();\r\n                        obj.PrintLate(builder, returnDay);  // if customer is late, add to builder their overdue info (days late and how much they owe)\r\n                    }\r\n                    else\r\n                    {\r\n                        // if customer is not late do this else block\r\n                        //builder.Append(\"Customer has no overdue information.\");\r\n                        //builder.AppendLine();\r\n                        Console.WriteLine(obj.custName + \" has no overdue information\" + \"\\n\");\r\n                    }\r\n\r\n                }\r\n\r\n                else\r\n                {   // if the movie is not in the movies list do this else block\r\n                    Console.WriteLine(\"Sorry \" + obj.custName);\r\n                    Console.WriteLine(\"We don't have \" + movieSelection + \"\\n\");     // If we don't have the movie\r\n                    //obj.NoMovieRented(builder);      // Prints the NoMovieRented method that only prints custname and phone# + a message\r\n                    //builder.AppendLine();\r\n                    Console.WriteLine(\"\\n\");\r\n                }\r\n            }\r\n\r\n            Console.WriteLine(\"List of movies: \");\r\n            foreach (string item in movies)\r\n            {\r\n                Console.WriteLine(item);\r\n            }\r\n\r\n            using (writer)\r\n            {\r\n                writer.WriteLine(builder);\r\n            }\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n\r\n\r\n\r\n     \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}